declare module Ammo {
  declare class btCollisionObject {
    constructor();
    constructor();


    activate(forceActivation: boolean): void;
    calculateSerializeBufferSize(): number;
    checkCollideWithOverride(co: btCollisionObject): boolean;
    checkCollideWith(co: btCollisionObject): boolean;
    forceActivationState(newState: number): void;
    getBroadphaseHandle(): btBroadphaseProxy;
    getCollisionShape(): btCollisionShape;
    getActivationState(): number;
    getDeactivationTime(): number;
    getInternalType(): number;
    getContactProcessingThreshold(): number;
    getRestitution(): number;
    getFriction(): number;
    getRollingFriction(): number;
    getSpinningFriction(): number;
    getContactStiffness(): number;
    getContactDamping(): number;
    getAnisotropicFriction(): btVector3;
    getWorldTransform(): btTransform;
    getWorldTransform(): btTransform;
    getUpdateRevisionInternal(): number;
    getBroadphaseHandle(): btBroadphaseProxy;
    getCollisionShape(): btCollisionShape;
    getInterpolationWorldTransform(): btTransform;
    getInterpolationWorldTransform(): btTransform;
    getInterpolationLinearVelocity(): btVector3;
    getInterpolationAngularVelocity(): btVector3;
    getIslandTag(): number;
    getCompanionId(): number;
    getWorldArrayIndex(): number;
    getHitFraction(): number;
    getCollisionFlags(): number;
    getCcdSweptSphereRadius(): number;
    getCcdMotionThreshold(): number;
    getCcdSquareMotionThreshold(): number;
    getUserPointer(): void;
    getUserIndex(): number;
    getUserIndex2(): number;
    getCustomDebugColor(colorRGB: btVector3): boolean;
    hasContactResponse(): boolean;
    hasAnisotropicFriction(frictionMode: number): boolean;
    internalSetExtensionPointer(pointer: void): void;
    isStaticOrKinematicObject(): boolean;
    isKinematicObject(): boolean;
    isStaticObject(): boolean;
    internalGetExtensionPointer(): void;
    isActive(): boolean;
    mergesSimulationIslands(): boolean;
    removeCustomDebugColor(): void;
    setContactProcessingThreshold(contactProcessingThreshold: number): void;
    setIslandTag(tag: number): void;
    setCollisionShape(collisionShape: btCollisionShape): void;
    setCompanionId(id: number): void;
    setAnisotropicFriction(anisotropicFriction: btVector3, frictionMode: number): void;
    setWorldArrayIndex(ix: number): void;
    setRestitution(rest: number): void;
    setHitFraction(hitFraction: number): void;
    serializeSingleObject(serializer: btSerializer): void;
    setCollisionFlags(flags: number): void;
    setFriction(frict: number): void;
    setCcdSweptSphereRadius(radius: number): void;
    setActivationState(newState: number): void;
    setRollingFriction(frict: number): void;
    setCcdMotionThreshold(ccdMotionThreshold: number): void;
    setBroadphaseHandle(handle: btBroadphaseProxy): void;
    setDeactivationTime(time: number): void;
    setSpinningFriction(frict: number): void;
    setUserPointer(userPointer: void): void;
    setUserIndex(index: number): void;
    setUserIndex2(index: number): void;
    setInterpolationWorldTransform(trans: btTransform): void;
    setCustomDebugColor(colorRGB: btVector3): void;
    setInterpolationLinearVelocity(linvel: btVector3): void;
    setInterpolationAngularVelocity(angvel: btVector3): void;
    setIgnoreCollisionCheck(co: btCollisionObject, ignoreCollisionCheck: boolean): void;
    setContactStiffnessAndDamping(stiffness: number, damping: number): void;
    serialize(dataBuffer: void, serializer: btSerializer): string;
    setWorldTransform(worldTrans: btTransform): void;
  }
}
