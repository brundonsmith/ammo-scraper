declare module Ammo {
  declare class btMultiBody {
    constructor();
    constructor(n_links: number, mass: number, inertia: btVector3, fixedBase: boolean, canSleep: boolean, deprecatedMultiDof: boolean);
    setupFixed(linkIndex: number, mass: number, inertia: btVector3, parent: number, rotParentToThis: btQuaternion, parentComToThisPivotOffset: btVector3, thisPivotToThisComOffset: btVector3, deprecatedDisableParentCollision: boolean): void;
    setupPrismatic(i: number, mass: number, inertia: btVector3, parent: number, rotParentToThis: btQuaternion, jointAxis: btVector3, parentComToThisPivotOffset: btVector3, thisPivotToThisComOffset: btVector3, disableParentCollision: boolean): void;
    setupRevolute(linkIndex: number, mass: number, inertia: btVector3, parentIndex: number, rotParentToThis: btQuaternion, jointAxis: btVector3, parentComToThisPivotOffset: btVector3, thisPivotToThisComOffset: btVector3, disableParentCollision: boolean): void;
    setupSpherical(linkIndex: number, mass: number, inertia: btVector3, parent: number, rotParentToThis: btQuaternion, parentComToThisPivotOffset: btVector3, thisPivotToThisComOffset: btVector3, disableParentCollision: boolean): void;
    setupPlanar(i: number, mass: number, inertia: btVector3, parent: number, rotParentToThis: btQuaternion, rotationAxis: btVector3, parentComToThisComOffset: btVector3, disableParentCollision: boolean): void;
    getLink(index: number): btMultibodyLink;
    getLink(index: number): btMultibodyLink;
    setBaseCollider(collider: btMultiBodyLinkCollider): void;
    getBaseCollider(): btMultiBodyLinkCollider;
    getBaseCollider(): btMultiBodyLinkCollider;
    getLinkCollider(index: number): btMultiBodyLinkCollider;
    getParent(link_num: number): number;
    getNumLinks(): number;
    getNumDofs(): number;
    getNumPosVars(): number;
    getBaseMass(): number;
    getBaseInertia(): btVector3;
    getLinkMass(i: number): number;
    getLinkInertia(i: number): btVector3;
    setBaseMass(mass: number): void;
    setBaseInertia(inertia: btVector3): void;
    getBasePos(): btVector3;
    getBaseVel(): btVector3;
    getWorldToBaseRot(): btQuaternion;
    getBaseOmega(): btVector3;
    setBasePos(pos: btVector3): void;
    setBaseWorldTransform(tr: btTransform): void;
    getBaseWorldTransform(): btTransform;
    setBaseVel(vel: btVector3): void;
    setWorldToBaseRot(rot: btQuaternion): void;
    setBaseOmega(omega: btVector3): void;
    getJointPos(i: number): number;
    getJointVel(i: number): number;
    getJointVelMultiDof(i: number): number;
    getJointPosMultiDof(i: number): number;
    getJointVelMultiDof(i: number): number;
    getJointPosMultiDof(i: number): number;
    setJointPos(i: number, q: number): void;
    setJointVel(i: number, qdot: number): void;
    setJointPosMultiDof(i: number, q: number): void;
    setJointVelMultiDof(i: number, qdot: number): void;
    getVelocityVector(): number;
    getRVector(i: number): btVector3;
    getParentToLocalRot(i: number): btQuaternion;
    localPosToWorld(i: number, vec: btVector3): btVector3;
    localDirToWorld(i: number, vec: btVector3): btVector3;
    worldPosToLocal(i: number, vec: btVector3): btVector3;
    worldDirToLocal(i: number, vec: btVector3): btVector3;
    localFrameToWorld(i: number, mat: btMatrix3x3): btMatrix3x3;
    getKineticEnergy(): number;
    getAngularMomentum(): btVector3;
    clearForcesAndTorques(): void;
    clearConstraintForces(): void;
    clearVelocities(): void;
    addBaseForce(f: btVector3): void;
    addBaseTorque(t: btVector3): void;
    addLinkForce(i: number, f: btVector3): void;
    addLinkTorque(i: number, t: btVector3): void;
    addBaseConstraintForce(f: btVector3): void;
    addBaseConstraintTorque(t: btVector3): void;
    addLinkConstraintForce(i: number, f: btVector3): void;
    addLinkConstraintTorque(i: number, t: btVector3): void;
    addJointTorque(i: number, Q: number): void;
    addJointTorqueMultiDof(i: number, dof: number, Q: number): void;
    addJointTorqueMultiDof(i: number, Q: number): void;
    getBaseForce(): btVector3;
    getBaseTorque(): btVector3;
    getLinkForce(i: number): btVector3;
    getLinkTorque(i: number): btVector3;
    getJointTorque(i: number): number;
    getJointTorqueMultiDof(i: number): number;
    computeAccelerationsArticulatedBodyAlgorithmMultiDof(dt: number, y: btAlignedObjectArra, y: btAlignedObjectArra, y: btAlignedObjectArra, isConstraintPass: boolean): void;
    stepVelocitiesMultiDof(dt: number, y: btAlignedObjectArra, y: btAlignedObjectArra, y: btAlignedObjectArra, isConstraintPass: boolean): void;
    calcAccelerationDeltasMultiDof(force: number, output: number, y: btAlignedObjectArra, y: btAlignedObjectArra): void;
    applyDeltaVeeMultiDof2(delta_vee: number, multiplier: number): void;
    processDeltaVeeMultiDof2(): void;
    applyDeltaVeeMultiDof(delta_vee: number, multiplier: number): void;
    stepPositionsMultiDof(dt: number, pq: number, pqd: number): void;
    fillContactJacobianMultiDof(link: number, contact_point: btVector3, normal: btVector3, jac: number, y: btAlignedObjectArra, y: btAlignedObjectArra, y: btAlignedObjectArra): void;
    fillConstraintJacobianMultiDof(link: number, contact_point: btVector3, normal_ang: btVector3, normal_lin: btVector3, jac: number, y: btAlignedObjectArra, y: btAlignedObjectArra, y: btAlignedObjectArra): void;
    setCanSleep(canSleep: boolean): void;
    getCanSleep(): boolean;
    isAwake(): boolean;
    wakeUp(): void;
    goToSleep(): void;
    checkMotionAndSleepIfRequired(timestep: number): void;
    hasFixedBase(): boolean;
    getCompanionId(): number;
    setCompanionId(id: number): void;
    setNumLinks(numLinks: number): void;
    getLinearDamping(): number;
    setLinearDamping(damp: number): void;
    getAngularDamping(): number;
    setAngularDamping(damp: number): void;
    getUseGyroTerm(): boolean;
    setUseGyroTerm(useGyro: boolean): void;
    getMaxCoordinateVelocity(): number;
    setMaxCoordinateVelocity(maxVel: number): void;
    getMaxAppliedImpulse(): number;
    setMaxAppliedImpulse(maxImp: number): void;
    setHasSelfCollision(hasSelfCollision: boolean): void;
    hasSelfCollision(): boolean;
    finalizeMultiDof(): void;
    useRK4Integration(use: boolean): void;
    isUsingRK4Integration(): boolean;
    useGlobalVelocities(use: boolean): void;
    isUsingGlobalVelocities(): boolean;
    isPosUpdated(): boolean;
    setPosUpdated(updated: boolean): void;
    internalNeedsJointFeedback(): boolean;
    forwardKinematics(y: btAlignedObjectArra, y: btAlignedObjectArra): void;
    compTreeLinkVelocities(omega: btVector3, vel: btVector3): void;
    updateCollisionObjectWorldTransforms(y: btAlignedObjectArra, y: btAlignedObjectArra): void;
    calculateSerializeBufferSize(): number;
    serialize(dataBuffer: void, serializer: btSerializer): string;
    getBaseName(): string;
    setBaseName(name: string): void;
    getUserPointer(): void;
    getUserIndex(): number;
    getUserIndex2(): number;
    setUserPointer(userPointer: void): void;
    setUserIndex(index: number): void;
    setUserIndex2(index: number): void;
  }
}
