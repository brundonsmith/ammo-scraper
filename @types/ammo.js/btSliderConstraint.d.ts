declare module Ammo {
  declare class btSliderConstraint {
    constructor();
    constructor(rbA: btRigidBody, rbB: btRigidBody, frameInA: btTransform, frameInB: btTransform, useLinearReferenceFrameA: boolean);
    constructor(rbB: btRigidBody, frameInB: btTransform, useLinearReferenceFrameA: boolean);
    getInfo1(info: btConstraintInfo1): void;
    getInfo1NonVirtual(info: btConstraintInfo1): void;
    getInfo2(info: btConstraintInfo2): void;
    getInfo2NonVirtual(info: btConstraintInfo2, transA: btTransform, transB: btTransform, linVelA: btVector3, linVelB: btVector3, rbAinvMass: number, rbBinvMass: number): void;
    getRigidBodyA(): btRigidBody;
    getRigidBodyB(): btRigidBody;
    getCalculatedTransformA(): btTransform;
    getCalculatedTransformB(): btTransform;
    getFrameOffsetA(): btTransform;
    getFrameOffsetB(): btTransform;
    getFrameOffsetA(): btTransform;
    getFrameOffsetB(): btTransform;
    getLowerLinLimit(): number;
    setLowerLinLimit(lowerLimit: number): void;
    getUpperLinLimit(): number;
    setUpperLinLimit(upperLimit: number): void;
    getLowerAngLimit(): number;
    setLowerAngLimit(lowerLimit: number): void;
    getUpperAngLimit(): number;
    setUpperAngLimit(upperLimit: number): void;
    getUseLinearReferenceFrameA(): boolean;
    getSoftnessDirLin(): number;
    getRestitutionDirLin(): number;
    getDampingDirLin(): number;
    getSoftnessDirAng(): number;
    getRestitutionDirAng(): number;
    getDampingDirAng(): number;
    getSoftnessLimLin(): number;
    getRestitutionLimLin(): number;
    getDampingLimLin(): number;
    getSoftnessLimAng(): number;
    getRestitutionLimAng(): number;
    getDampingLimAng(): number;
    getSoftnessOrthoLin(): number;
    getRestitutionOrthoLin(): number;
    getDampingOrthoLin(): number;
    getSoftnessOrthoAng(): number;
    getRestitutionOrthoAng(): number;
    getDampingOrthoAng(): number;
    setSoftnessDirLin(softnessDirLin: number): void;
    setRestitutionDirLin(restitutionDirLin: number): void;
    setDampingDirLin(dampingDirLin: number): void;
    setSoftnessDirAng(softnessDirAng: number): void;
    setRestitutionDirAng(restitutionDirAng: number): void;
    setDampingDirAng(dampingDirAng: number): void;
    setSoftnessLimLin(softnessLimLin: number): void;
    setRestitutionLimLin(restitutionLimLin: number): void;
    setDampingLimLin(dampingLimLin: number): void;
    setSoftnessLimAng(softnessLimAng: number): void;
    setRestitutionLimAng(restitutionLimAng: number): void;
    setDampingLimAng(dampingLimAng: number): void;
    setSoftnessOrthoLin(softnessOrthoLin: number): void;
    setRestitutionOrthoLin(restitutionOrthoLin: number): void;
    setDampingOrthoLin(dampingOrthoLin: number): void;
    setSoftnessOrthoAng(softnessOrthoAng: number): void;
    setRestitutionOrthoAng(restitutionOrthoAng: number): void;
    setDampingOrthoAng(dampingOrthoAng: number): void;
    setPoweredLinMotor(onOff: boolean): void;
    getPoweredLinMotor(): boolean;
    setTargetLinMotorVelocity(targetLinMotorVelocity: number): void;
    getTargetLinMotorVelocity(): number;
    setMaxLinMotorForce(maxLinMotorForce: number): void;
    getMaxLinMotorForce(): number;
    setPoweredAngMotor(onOff: boolean): void;
    getPoweredAngMotor(): boolean;
    setTargetAngMotorVelocity(targetAngMotorVelocity: number): void;
    getTargetAngMotorVelocity(): number;
    setMaxAngMotorForce(maxAngMotorForce: number): void;
    getMaxAngMotorForce(): number;
    getLinearPos(): number;
    getAngularPos(): number;
    getSolveLinLimit(): boolean;
    getLinDepth(): number;
    getSolveAngLimit(): boolean;
    getAngDepth(): number;
    calculateTransforms(transA: btTransform, transB: btTransform): void;
    testLinLimits(): void;
    testAngLimits(): void;
    getAncorInA(): btVector3;
    getAncorInB(): btVector3;
    getUseFrameOffset(): boolean;
    setUseFrameOffset(frameOffsetOnOff: boolean): void;
    setFrames(frameA: btTransform, frameB: btTransform): void;
    setParam(num: number, value: number, axis: number): void;
    getParam(num: number, axis: number): number;
    getFlags(): number;
    calculateSerializeBufferSize(): number;
    serialize(dataBuffer: void, serializer: btSerializer): string;
  }
}
